
require "constants"

class ControlPanel:

	# initializes the sliders and buttons
	def init():
		init_period_slider()
		init_start_stop_buttons()
		init_velocity_slider()
		init_track_buttons()

	# packs the message to be sent
	def send_afloat(path, val):
	    # display val
	    o2_send_start()
	    for v in val:
	        if not v
	            v = 0
	        elif v == true
	            v = 1
	        o2_add_float(v)
	    o2_send_finish(0, "/" + CLIENT_SERVICE + path, false)

	# draw the slider that controls the period of the music as a whole
	def init_period_slider():
		# calculate slider parameters
		x = 30
		# y = int(window_height / 2 + 30)
		y = 30
		label_name = "Period"
		label_width = len(label_name) * 8

		slider_width = 200
		slider_height = 25
		min_period = 0.2
		max_period = 5
		init_period = 1

		# set the slider
		period_slider = Labeled_slider(default_window, label_name,
	                                    x, y, slider_width + label_width,
	                                    slider_height, label_width,
	                                    min_period, max_period, init_period,
	                                    'exponential')
		period_slider.target = this
		period_slider.method = 'send_set_period'

	# initializes the buttons
	def init_start_stop_buttons():

		# calculate parameters for button position
		button_x = margin_left
		# button_y = int(window_height / 2 + margin_left)
		button_y = margin_left
		button_name = "Stop All"
		button_width = len(button_name) * 10
		button_height = 25

		# set the stop all button
		stop_all_button = Button(0, button_name, button_x, button_y,
									button_width, button_height)
		stop_all_button.target = this
		stop_all_button.method = 'send_stop_all'

		# set the start all button
		button_x = button_x + button_width + margin_left
		button_name = "Start All"
		button_width = len(button_name) * 10
		start_all_button = Button(0, button_name, button_x, button_y,
										button_width, button_height)
		start_all_button.target = this
		start_all_button.method = 'send_start_all'

	def init_octave_buttons():

		x = margin_left
		init_y = button_height + slider_height + 3 * margin_top

		# initialize octave up
		x = x + button_width + margin_left
		button_name = "Octave Up"
		button_width = len(button_name) * 10
		octave_up_button = Button(0, button_name, x, y,
		                          button_width, button_height)
		octave_up_button.target = this
		octave_up_button.method = 'send_octave_up'

		# initialize octave down
		x = x + button_width + margin_left
		button_name = "Octave Down"
		button_width = len(button_name) * 10
		octave_down_button = Button(0, button_name, x, y,
	                                button_width, button_height)
		octave_down_button.target = this
		octave_down_button.method = 'send_octave_down'

	# initializes the slider that controls the volume
	def init_velocity_slider():

		lane_height = button_height + slider_height + 3 * margin_top
		init_x = margin_left
		init_y = button_height + slider_height + 3 * margin_top

		for i = 0 to num_tracks:
			# set the parameters of the slider
			x = margin_left
			# y = int(window_height / 2) + init_y + button_height + margin_top
			y = init_y + button_height + margin_top
			label_name = "Sound" + " " + str(i + 1) + " " + "Velocity"
			label_width = len(label_name) * 8
			# draw the slider
			velocity_slider = Labeled_slider(default_window, label_name,
		                                     x, y, label_width + slider_width,
		                                     slider_height, label_width,
		                                     min_vel, max_vel, INIT_VEL,
		                                     'linear')
			# velocity_slider.id = i
			velocity_slider.target = this
			velocity_slider.method = 'send_set_velocity'			

			# update y position
			init_y = init_y + lane_height

	# sends the stop all message to the Server
	def send_stop_all(obj, event, x, y):
		send_afloat("/stopAllButton", [x])

	# sends the start all message to the Server
	def send_start_all(obj, event, x, y):
		send_afloat("/startAllButton", [x])

	# sends the set period message to the Server
	def send_set_period(obj, x):
		send_afloat("/periodSlider", [x])

	# sends the messages that raises the octave of the sound track
	def send_octave_up(obj, event, x, y):
		send_afloat("/octaveUpTrackButton" + "/", [x])

	# sends the message that lowers the octave of the sound track
	def send_octave_down(obj, event, x, y):
		send_afloat("/octaveDownTrackButton" + "/", [x])

	# sends the message that sets the volume of the sound track
	def send_set_velocity(obj, x):
		send_afloat("/velocityTrackSlider" + "/", [x])





